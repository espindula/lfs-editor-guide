<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch04-commit">
<title>Commit it!</title>
<?dbhtml filename="commit.html"?>

<para>
  Once you are sure that everything renders and that you know which
  files you wish to commit, you're ready. First commit locally:
</para>

<itemizedlist>
  <listitem>
    <para>Normal Procedure: allows to only commit what you want</para>
    <itemizedlist>
      <listitem>
        <para>
          Run <command>git add
          <replaceable>&lt;file1&gt; &lt;file2&gt; ...</replaceable></command>
        </para>
      </listitem>
      <listitem>
        <para>
          After verifying that all has been correctly staged (use
          <command>git status</command> and/or
          <command>git diff --staged</command>), run
          <command>git commit</command> and fill up the log message in the
          editor window. Or for a short log message, run
          <command>git commit
                   -m"<replaceable>log message</replaceable>"</command>.
        </para>
      </listitem>
    </itemizedlist>
  </listitem>
  <listitem>
    <para>Shortcut to commit all modified files in one go:</para>
    <itemizedlist>
      <listitem>
        <para>
          Run <command>git commit -a</command> and fill up the log message in
          the editor window. As above, you can use the <option>-m</option>
          option for short log messages.
        </para>
      </listitem>
    </itemizedlist>
  </listitem>
</itemizedlist>

<para>
  Then push your work: <command>git push</command>. A transaction log of all
  the commits that make the push will be emailed to the
  <email>lfs-book@lists.linuxfromscratch.org</email> mailinglist so other
  editors can see right away what you did. The commit emails contain some
  basic info (log, changes to which files) including a
  <emphasis>diff -u</emphasis> format output.
</para>

<para>
  <emphasis>About log messages:</emphasis> Due to the way
  <command>git log</command> displays log messages, it is recommended to
  keep the size of each line below 72 characters. A good commit message is
  composed of a short summary (not more than fifty characters),
  a blank line, then details, reasons, etc on less than 72 characters lines.
  Log messages should <emphasis>never</emphasis> be empty. Even if the
  message is just 'small typo fix', that'll do. Other usual messages are
  'update to package-x.y.z' or 'fixed installation instructions of package
  foo'. That last one usually needs also explanation lines as said
  above.
</para>

<para>
  <emphasis>Example</emphasis>: If you have modified
  <filename>general.ent</filename>, the changelog,
  and fixed a typo in chapter 6 bash installation, the workflow could be:
</para>

<screen><userinput>git add general.ent chapter01/changelog.xml chapter06/bash.xml
git commit -m'fixed a typo in chapter 6 bash'</userinput></screen>

</sect1>
